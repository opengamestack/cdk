"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core = require("@aws-cdk/core");
const s3 = require("@aws-cdk/aws-s3");
const cloudfront = require("@aws-cdk/aws-cloudfront");
const route53 = require("@aws-cdk/aws-route53");
const route53Targets = require("@aws-cdk/aws-route53-targets");
class Setup extends core.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const cors = [{
                allowedMethods: [s3.HttpMethods.GET],
                allowedOrigins: ['*'],
                allowedHeaders: ['*']
            }];
        this.bucket = new s3.Bucket(this, 'Bucket', {
            bucketName: props.bucketName,
            publicReadAccess: true,
            cors: props.bucketCors ? cors : undefined,
            websiteIndexDocument: props.bucketIndex ? props.bucketIndex : 'index.html',
            websiteErrorDocument: props.bucketError ? props.bucketError : 'index.html'
        });
        this.distribution = new cloudfront.CloudFrontWebDistribution(this, 'Distribution', {
            originConfigs: [
                {
                    customOriginSource: {
                        domainName: this.bucket.bucketWebsiteDomainName,
                        originProtocolPolicy: cloudfront.OriginProtocolPolicy.HTTP_ONLY
                    },
                    behaviors: [{ isDefaultBehavior: true }]
                }
            ],
            priceClass: props.cloudFrontPriceClass ? props.cloudFrontPriceClass : cloudfront.PriceClass.PRICE_CLASS_100,
            viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            viewerCertificate: {
                aliases: props.cloudFrontDomainNames,
                props: {
                    acmCertificateArn: props.acmCertArn,
                    sslSupportMethod: 'sni-only'
                }
            }
        });
        this.hostedZone = route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {
            hostedZoneId: props.hostedZoneId,
            zoneName: props.hostedZoneName
        });
        this.aRecord = new route53.ARecord(this, 'ARecord', {
            recordName: props.route53RecordName,
            zone: this.hostedZone,
            target: route53.RecordTarget.fromAlias(new route53Targets.CloudFrontTarget(this.distribution))
        });
    }
}
exports.Setup = Setup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJTZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFzQztBQUN0QyxzQ0FBc0M7QUFDdEMsc0RBQXNEO0FBQ3RELGdEQUFnRDtBQUNoRCwrREFBK0Q7QUFvQi9ELE1BQWEsS0FBTSxTQUFRLElBQUksQ0FBQyxTQUFTO0lBT3JDLFlBQVksS0FBcUIsRUFBRSxFQUFVLEVBQUUsS0FBaUI7UUFDNUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLElBQUksR0FBRyxDQUFDO2dCQUNWLGNBQWMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDO2dCQUNwQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUM7Z0JBQ3JCLGNBQWMsRUFBRSxDQUFDLEdBQUcsQ0FBQzthQUN4QixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQ3hDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLElBQUksRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVM7WUFDekMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWTtZQUMxRSxvQkFBb0IsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxZQUFZO1NBQzdFLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxVQUFVLENBQUMseUJBQXlCLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUMvRSxhQUFhLEVBQUU7Z0JBQ1g7b0JBQ0ksa0JBQWtCLEVBQUU7d0JBQ2hCLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1Qjt3QkFDL0Msb0JBQW9CLEVBQUUsVUFBVSxDQUFDLG9CQUFvQixDQUFDLFNBQVM7cUJBQ2xFO29CQUNELFNBQVMsRUFBRSxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUM7aUJBQzNDO2FBQ0o7WUFDRCxVQUFVLEVBQUUsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsZUFBZTtZQUMzRyxvQkFBb0IsRUFBRSxVQUFVLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCO1lBQ3ZFLGlCQUFpQixFQUFFO2dCQUNmLE9BQU8sRUFBRSxLQUFLLENBQUMscUJBQXFCO2dCQUNwQyxLQUFLLEVBQUU7b0JBQ0gsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLFVBQVU7b0JBQ25DLGdCQUFnQixFQUFFLFVBQVU7aUJBQy9CO2FBQ0o7U0FDSixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUM5RSxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxjQUFjO1NBQ2pDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7WUFDaEQsVUFBVSxFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDbkMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQ3JCLE1BQU0sRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakcsQ0FBQyxDQUFDO0lBRVAsQ0FBQztDQUNKO0FBeERELHNCQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvcmUgZnJvbSAnQGF3cy1jZGsvY29yZSc7XHJcbmltcG9ydCAqIGFzIHMzIGZyb20gJ0Bhd3MtY2RrL2F3cy1zMyc7XHJcbmltcG9ydCAqIGFzIGNsb3VkZnJvbnQgZnJvbSAnQGF3cy1jZGsvYXdzLWNsb3VkZnJvbnQnO1xyXG5pbXBvcnQgKiBhcyByb3V0ZTUzIGZyb20gJ0Bhd3MtY2RrL2F3cy1yb3V0ZTUzJztcclxuaW1wb3J0ICogYXMgcm91dGU1M1RhcmdldHMgZnJvbSAnQGF3cy1jZGsvYXdzLXJvdXRlNTMtdGFyZ2V0cyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERlcGxveW1lbnRTdGFja1Byb3BzIGV4dGVuZHMgY29yZS5TdGFja1Byb3BzIHtcclxuICAgIGJ1Y2tldDogczMuQnVja2V0O1xyXG4gICAgZGlzdHJpYnV0aW9uOiBjbG91ZGZyb250LkNsb3VkRnJvbnRXZWJEaXN0cmlidXRpb247XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2V0dXBQcm9wcyB7XHJcbiAgICBidWNrZXROYW1lOiBzdHJpbmc7XHJcbiAgICBidWNrZXRDb3JzPzogYm9vbGVhbjtcclxuICAgIGJ1Y2tldEluZGV4Pzogc3RyaW5nO1xyXG4gICAgYnVja2V0RXJyb3I/OiBzdHJpbmc7XHJcbiAgICBhY21DZXJ0QXJuOiBzdHJpbmc7XHJcbiAgICBob3N0ZWRab25lSWQ6IHN0cmluZztcclxuICAgIGhvc3RlZFpvbmVOYW1lOiBzdHJpbmc7XHJcbiAgICByb3V0ZTUzUmVjb3JkTmFtZTogc3RyaW5nO1xyXG4gICAgY2xvdWRGcm9udERvbWFpbk5hbWVzOiBzdHJpbmdbXTtcclxuICAgIGNsb3VkRnJvbnRQcmljZUNsYXNzPzogY2xvdWRmcm9udC5QcmljZUNsYXNzO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2V0dXAgZXh0ZW5kcyBjb3JlLkNvbnN0cnVjdCB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGJ1Y2tldDogczMuQnVja2V0O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGRpc3RyaWJ1dGlvbjogY2xvdWRmcm9udC5DbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGhvc3RlZFpvbmU6IHJvdXRlNTMuSUhvc3RlZFpvbmU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgYVJlY29yZDogcm91dGU1My5BUmVjb3JkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBjb3JlLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFNldHVwUHJvcHMpIHtcclxuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xyXG5cclxuICAgICAgICBjb25zdCBjb3JzID0gW3tcclxuICAgICAgICAgICAgYWxsb3dlZE1ldGhvZHM6IFtzMy5IdHRwTWV0aG9kcy5HRVRdLFxyXG4gICAgICAgICAgICBhbGxvd2VkT3JpZ2luczogWycqJ10sXHJcbiAgICAgICAgICAgIGFsbG93ZWRIZWFkZXJzOiBbJyonXVxyXG4gICAgICAgIH1dO1xyXG5cclxuICAgICAgICB0aGlzLmJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQodGhpcywgJ0J1Y2tldCcsIHtcclxuICAgICAgICAgICAgYnVja2V0TmFtZTogcHJvcHMuYnVja2V0TmFtZSxcclxuICAgICAgICAgICAgcHVibGljUmVhZEFjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgY29yczogcHJvcHMuYnVja2V0Q29ycyA/IGNvcnMgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHdlYnNpdGVJbmRleERvY3VtZW50OiBwcm9wcy5idWNrZXRJbmRleCA/IHByb3BzLmJ1Y2tldEluZGV4IDogJ2luZGV4Lmh0bWwnLFxyXG4gICAgICAgICAgICB3ZWJzaXRlRXJyb3JEb2N1bWVudDogcHJvcHMuYnVja2V0RXJyb3IgPyBwcm9wcy5idWNrZXRFcnJvciA6ICdpbmRleC5odG1sJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmRpc3RyaWJ1dGlvbiA9IG5ldyBjbG91ZGZyb250LkNsb3VkRnJvbnRXZWJEaXN0cmlidXRpb24odGhpcywgJ0Rpc3RyaWJ1dGlvbicsIHtcclxuICAgICAgICAgICAgb3JpZ2luQ29uZmlnczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbU9yaWdpblNvdXJjZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb21haW5OYW1lOiB0aGlzLmJ1Y2tldC5idWNrZXRXZWJzaXRlRG9tYWluTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luUHJvdG9jb2xQb2xpY3k6IGNsb3VkZnJvbnQuT3JpZ2luUHJvdG9jb2xQb2xpY3kuSFRUUF9PTkxZXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBiZWhhdmlvcnM6IFt7IGlzRGVmYXVsdEJlaGF2aW9yOiB0cnVlIH1dXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHByaWNlQ2xhc3M6IHByb3BzLmNsb3VkRnJvbnRQcmljZUNsYXNzID8gcHJvcHMuY2xvdWRGcm9udFByaWNlQ2xhc3MgOiBjbG91ZGZyb250LlByaWNlQ2xhc3MuUFJJQ0VfQ0xBU1NfMTAwLFxyXG4gICAgICAgICAgICB2aWV3ZXJQcm90b2NvbFBvbGljeTogY2xvdWRmcm9udC5WaWV3ZXJQcm90b2NvbFBvbGljeS5SRURJUkVDVF9UT19IVFRQUyxcclxuICAgICAgICAgICAgdmlld2VyQ2VydGlmaWNhdGU6IHtcclxuICAgICAgICAgICAgICAgIGFsaWFzZXM6IHByb3BzLmNsb3VkRnJvbnREb21haW5OYW1lcyxcclxuICAgICAgICAgICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWNtQ2VydGlmaWNhdGVBcm46IHByb3BzLmFjbUNlcnRBcm4sXHJcbiAgICAgICAgICAgICAgICAgICAgc3NsU3VwcG9ydE1ldGhvZDogJ3NuaS1vbmx5J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuaG9zdGVkWm9uZSA9IHJvdXRlNTMuSG9zdGVkWm9uZS5mcm9tSG9zdGVkWm9uZUF0dHJpYnV0ZXModGhpcywgJ0hvc3RlZFpvbmUnLCB7XHJcbiAgICAgICAgICAgIGhvc3RlZFpvbmVJZDogcHJvcHMuaG9zdGVkWm9uZUlkLFxyXG4gICAgICAgICAgICB6b25lTmFtZTogcHJvcHMuaG9zdGVkWm9uZU5hbWVcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmFSZWNvcmQgPSBuZXcgcm91dGU1My5BUmVjb3JkKHRoaXMsICdBUmVjb3JkJywge1xyXG4gICAgICAgICAgICByZWNvcmROYW1lOiBwcm9wcy5yb3V0ZTUzUmVjb3JkTmFtZSxcclxuICAgICAgICAgICAgem9uZTogdGhpcy5ob3N0ZWRab25lLFxyXG4gICAgICAgICAgICB0YXJnZXQ6IHJvdXRlNTMuUmVjb3JkVGFyZ2V0LmZyb21BbGlhcyhuZXcgcm91dGU1M1RhcmdldHMuQ2xvdWRGcm9udFRhcmdldCh0aGlzLmRpc3RyaWJ1dGlvbikpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG59Il19