"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core = require("@aws-cdk/core");
const s3 = require("@aws-cdk/aws-s3");
const cloudfront = require("@aws-cdk/aws-cloudfront");
const route53 = require("@aws-cdk/aws-route53");
const route53Targets = require("@aws-cdk/aws-route53-targets");
class Setup extends core.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const cors = [{
                allowedMethods: [s3.HttpMethods.GET],
                allowedOrigins: ['*'],
                allowedHeaders: ['*']
            }];
        this.bucket = new s3.Bucket(this, 'Bucket', {
            bucketName: props.bucketName,
            publicReadAccess: true,
            cors: props.bucketCors ? cors : undefined,
            websiteIndexDocument: props.bucketIndex ? props.bucketIndex : 'index.html',
            websiteErrorDocument: props.bucketError ? props.bucketError : 'index.html'
        });
        this.distribution = new cloudfront.CloudFrontWebDistribution(this, 'Distribution', {
            originConfigs: [
                {
                    customOriginSource: {
                        domainName: this.bucket.bucketWebsiteDomainName,
                        originProtocolPolicy: cloudfront.OriginProtocolPolicy.HTTP_ONLY
                    },
                    behaviors: [{ isDefaultBehavior: true }]
                }
            ],
            priceClass: props.cloudFrontPriceClass ? props.cloudFrontPriceClass : cloudfront.PriceClass.PRICE_CLASS_100,
            viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            viewerCertificate: {
                aliases: props.cloudFrontDomainNames,
                props: {
                    acmCertificateArn: props.acmCertArn,
                    sslSupportMethod: 'sni-only'
                }
            }
        });
        this.hostedZone = route53.HostedZone.fromHostedZoneAttributes(this, 'HostedZone', {
            hostedZoneId: props.hostedZoneId,
            zoneName: props.hostedZoneName
        });
        this.aRecords = [];
        props.route53RecordNames.forEach(n => {
            const aRecord = new route53.ARecord(this, 'ARecord', {
                recordName: n,
                zone: this.hostedZone,
                target: route53.RecordTarget.fromAlias(new route53Targets.CloudFrontTarget(this.distribution))
            });
            this.aRecords.push(aRecord);
        });
    }
}
exports.Setup = Setup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJTZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFzQztBQUN0QyxzQ0FBc0M7QUFDdEMsc0RBQXNEO0FBQ3RELGdEQUFnRDtBQUNoRCwrREFBK0Q7QUFvQi9ELE1BQWEsS0FBTSxTQUFRLElBQUksQ0FBQyxTQUFTO0lBT3JDLFlBQVksS0FBcUIsRUFBRSxFQUFVLEVBQUUsS0FBaUI7UUFDNUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLElBQUksR0FBRyxDQUFDO2dCQUNWLGNBQWMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDO2dCQUNwQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUM7Z0JBQ3JCLGNBQWMsRUFBRSxDQUFDLEdBQUcsQ0FBQzthQUN4QixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFO1lBQ3hDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLElBQUksRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVM7WUFDekMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWTtZQUMxRSxvQkFBb0IsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxZQUFZO1NBQzdFLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxVQUFVLENBQUMseUJBQXlCLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUMvRSxhQUFhLEVBQUU7Z0JBQ1g7b0JBQ0ksa0JBQWtCLEVBQUU7d0JBQ2hCLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1Qjt3QkFDL0Msb0JBQW9CLEVBQUUsVUFBVSxDQUFDLG9CQUFvQixDQUFDLFNBQVM7cUJBQ2xFO29CQUNELFNBQVMsRUFBRSxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUM7aUJBQzNDO2FBQ0o7WUFDRCxVQUFVLEVBQUUsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsZUFBZTtZQUMzRyxvQkFBb0IsRUFBRSxVQUFVLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCO1lBQ3ZFLGlCQUFpQixFQUFFO2dCQUNmLE9BQU8sRUFBRSxLQUFLLENBQUMscUJBQXFCO2dCQUNwQyxLQUFLLEVBQUU7b0JBQ0gsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLFVBQVU7b0JBQ25DLGdCQUFnQixFQUFFLFVBQVU7aUJBQy9CO2FBQ0o7U0FDSixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsd0JBQXdCLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUM5RSxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxjQUFjO1NBQ2pDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ25CLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDakMsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7Z0JBQ2pELFVBQVUsRUFBRSxDQUFDO2dCQUNiLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDckIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksY0FBYyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNqRyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7Q0FDSjtBQTVERCxzQkE0REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjb3JlIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBzMyBmcm9tICdAYXdzLWNkay9hd3MtczMnO1xyXG5pbXBvcnQgKiBhcyBjbG91ZGZyb250IGZyb20gJ0Bhd3MtY2RrL2F3cy1jbG91ZGZyb250JztcclxuaW1wb3J0ICogYXMgcm91dGU1MyBmcm9tICdAYXdzLWNkay9hd3Mtcm91dGU1Myc7XHJcbmltcG9ydCAqIGFzIHJvdXRlNTNUYXJnZXRzIGZyb20gJ0Bhd3MtY2RrL2F3cy1yb3V0ZTUzLXRhcmdldHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEZXBsb3ltZW50U3RhY2tQcm9wcyBleHRlbmRzIGNvcmUuU3RhY2tQcm9wcyB7XHJcbiAgICBidWNrZXQ6IHMzLkJ1Y2tldDtcclxuICAgIGRpc3RyaWJ1dGlvbjogY2xvdWRmcm9udC5DbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNldHVwUHJvcHMge1xyXG4gICAgYnVja2V0TmFtZTogc3RyaW5nO1xyXG4gICAgYnVja2V0Q29ycz86IGJvb2xlYW47XHJcbiAgICBidWNrZXRJbmRleD86IHN0cmluZztcclxuICAgIGJ1Y2tldEVycm9yPzogc3RyaW5nO1xyXG4gICAgYWNtQ2VydEFybjogc3RyaW5nO1xyXG4gICAgaG9zdGVkWm9uZUlkOiBzdHJpbmc7XHJcbiAgICBob3N0ZWRab25lTmFtZTogc3RyaW5nO1xyXG4gICAgcm91dGU1M1JlY29yZE5hbWVzOiBzdHJpbmdbXTtcclxuICAgIGNsb3VkRnJvbnREb21haW5OYW1lczogc3RyaW5nW107XHJcbiAgICBjbG91ZEZyb250UHJpY2VDbGFzcz86IGNsb3VkZnJvbnQuUHJpY2VDbGFzcztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNldHVwIGV4dGVuZHMgY29yZS5Db25zdHJ1Y3Qge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBidWNrZXQ6IHMzLkJ1Y2tldDtcclxuICAgIHB1YmxpYyByZWFkb25seSBkaXN0cmlidXRpb246IGNsb3VkZnJvbnQuQ2xvdWRGcm9udFdlYkRpc3RyaWJ1dGlvbjtcclxuICAgIHB1YmxpYyByZWFkb25seSBob3N0ZWRab25lOiByb3V0ZTUzLklIb3N0ZWRab25lO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGFSZWNvcmRzOiByb3V0ZTUzLkFSZWNvcmRbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogY29yZS5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTZXR1cFByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29ycyA9IFt7XHJcbiAgICAgICAgICAgIGFsbG93ZWRNZXRob2RzOiBbczMuSHR0cE1ldGhvZHMuR0VUXSxcclxuICAgICAgICAgICAgYWxsb3dlZE9yaWdpbnM6IFsnKiddLFxyXG4gICAgICAgICAgICBhbGxvd2VkSGVhZGVyczogWycqJ11cclxuICAgICAgICB9XTtcclxuXHJcbiAgICAgICAgdGhpcy5idWNrZXQgPSBuZXcgczMuQnVja2V0KHRoaXMsICdCdWNrZXQnLCB7XHJcbiAgICAgICAgICAgIGJ1Y2tldE5hbWU6IHByb3BzLmJ1Y2tldE5hbWUsXHJcbiAgICAgICAgICAgIHB1YmxpY1JlYWRBY2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgIGNvcnM6IHByb3BzLmJ1Y2tldENvcnMgPyBjb3JzIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB3ZWJzaXRlSW5kZXhEb2N1bWVudDogcHJvcHMuYnVja2V0SW5kZXggPyBwcm9wcy5idWNrZXRJbmRleCA6ICdpbmRleC5odG1sJyxcclxuICAgICAgICAgICAgd2Vic2l0ZUVycm9yRG9jdW1lbnQ6IHByb3BzLmJ1Y2tldEVycm9yID8gcHJvcHMuYnVja2V0RXJyb3IgOiAnaW5kZXguaHRtbCdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5kaXN0cmlidXRpb24gPSBuZXcgY2xvdWRmcm9udC5DbG91ZEZyb250V2ViRGlzdHJpYnV0aW9uKHRoaXMsICdEaXN0cmlidXRpb24nLCB7XHJcbiAgICAgICAgICAgIG9yaWdpbkNvbmZpZ3M6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21PcmlnaW5Tb3VyY2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWluTmFtZTogdGhpcy5idWNrZXQuYnVja2V0V2Vic2l0ZURvbWFpbk5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpblByb3RvY29sUG9saWN5OiBjbG91ZGZyb250Lk9yaWdpblByb3RvY29sUG9saWN5LkhUVFBfT05MWVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3JzOiBbeyBpc0RlZmF1bHRCZWhhdmlvcjogdHJ1ZSB9XVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBwcmljZUNsYXNzOiBwcm9wcy5jbG91ZEZyb250UHJpY2VDbGFzcyA/IHByb3BzLmNsb3VkRnJvbnRQcmljZUNsYXNzIDogY2xvdWRmcm9udC5QcmljZUNsYXNzLlBSSUNFX0NMQVNTXzEwMCxcclxuICAgICAgICAgICAgdmlld2VyUHJvdG9jb2xQb2xpY3k6IGNsb3VkZnJvbnQuVmlld2VyUHJvdG9jb2xQb2xpY3kuUkVESVJFQ1RfVE9fSFRUUFMsXHJcbiAgICAgICAgICAgIHZpZXdlckNlcnRpZmljYXRlOiB7XHJcbiAgICAgICAgICAgICAgICBhbGlhc2VzOiBwcm9wcy5jbG91ZEZyb250RG9tYWluTmFtZXMsXHJcbiAgICAgICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjbUNlcnRpZmljYXRlQXJuOiBwcm9wcy5hY21DZXJ0QXJuLFxyXG4gICAgICAgICAgICAgICAgICAgIHNzbFN1cHBvcnRNZXRob2Q6ICdzbmktb25seSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmhvc3RlZFpvbmUgPSByb3V0ZTUzLkhvc3RlZFpvbmUuZnJvbUhvc3RlZFpvbmVBdHRyaWJ1dGVzKHRoaXMsICdIb3N0ZWRab25lJywge1xyXG4gICAgICAgICAgICBob3N0ZWRab25lSWQ6IHByb3BzLmhvc3RlZFpvbmVJZCxcclxuICAgICAgICAgICAgem9uZU5hbWU6IHByb3BzLmhvc3RlZFpvbmVOYW1lXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5hUmVjb3JkcyA9IFtdO1xyXG4gICAgICAgIHByb3BzLnJvdXRlNTNSZWNvcmROYW1lcy5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBhUmVjb3JkID0gbmV3IHJvdXRlNTMuQVJlY29yZCh0aGlzLCAnQVJlY29yZCcsIHtcclxuICAgICAgICAgICAgICAgIHJlY29yZE5hbWU6IG4sXHJcbiAgICAgICAgICAgICAgICB6b25lOiB0aGlzLmhvc3RlZFpvbmUsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHJvdXRlNTMuUmVjb3JkVGFyZ2V0LmZyb21BbGlhcyhuZXcgcm91dGU1M1RhcmdldHMuQ2xvdWRGcm9udFRhcmdldCh0aGlzLmRpc3RyaWJ1dGlvbikpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmFSZWNvcmRzLnB1c2goYVJlY29yZCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG59Il19